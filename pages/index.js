import Head from "next/head";
import Typed from "react-typed";
import Navbar from "/components/Navbar.js";
import { useState } from "react";
import { postData } from "../utils/fetchData";
const roles = ["Bcrypt Hash Generator of Blowfish"];

export default function Home() {
	const initialState = { salt: "", text: "", hash: "",date: "" };
	const [hashData, setHashData] = useState({});
  // const [time, setTime] = useState({})
	const { salt, text, hash, date } = hashData;

	const handleChangeInput = (e) => {
		const { name, value } = e.target;
		setHashData({ ...hashData, [name]: value });
	};
	const handleSubmit = async (e) => {
		e.preventDefault();
		console.log(hashData);
		const res = await postData("aes", hashData);
		console.log(res);
		setHashData({ ...hashData, hash: res.hash , date:res.date });
		// setTime({...time, date:res.date})
	};
	return (
		<div>
			<Head>
				<title>Create Next App</title>
				<meta name="description" content="Generated by create next app" />
				<link rel="icon" href="/favicon.ico" />
			</Head>

			<Navbar />

			{/* Under Navbar */}
			<div className="py-3 bg-slate-100  font-medium flex mx-auto text-neutral-900 justify-center text-center">
				<p className="sm:text-4xl text-2xl fon">
					{" "}
					<Typed
						loop={true}
						typeSpeed={50}
						backSpeed={50}
						strings={roles}
						backDelay={2000}
						loopCount={3}
						showCursor
						cursorChat="|ss|"
					/>
				</p>

				{/* WRITING LOOP */}
			</div>

			<div className="bg-slate-200 mx-auto py-5 sm:px-5">
				<form>
					<div className="grid grid-cols-10 gap-3 p-2 ">
						<div className="col-span-3 place-self-center ">
							<button
								onClick={handleSubmit}
								type="submit"
								className="py-2 w-full sm:px-12 px-1 sm:px-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-slate-600 hover:bg-slate-700 focus:outline-none focus:ring-1 focus:ring-offset-1 focus:ring-gray-900"
							>
								<span>Generat&nbsp;Hash</span>
							</button>
							<div>
								<input
									className="py-2  mt-4 flex justify-center w-full shadow appearance-none border rounded py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
									id="salt"
									type="number"
									min="1"
									max="18"
									placeholder="2-to-18"
									name="salt"
									value={salt}
									onChange={handleChangeInput}
								></input>
								<label className="block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2">
									Rounds of Salting
								</label>
							</div>
						</div>
						<div className="col-span-7 ">
							{" "}
							<textarea
								className="shadow text-xl block w-full appearance-none border rounded py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
								id="text"
								type="text"
								placeholder="Text2hash"
								rows="3"
								name="text"
								value={text}
								onChange={handleChangeInput}
							></textarea>
						</div>
						<div className="col-span-3 pt-10 mx-auto place-self-center text-sm sm:text-xl">
							Hashed text --{">"}
							<div className="pt-14">Encryption time --{">"}</div>
						</div>
					
						
						
						<div className="col-span-7">
							
							{" "}
							<textarea
								className="text-xl justify-center block w-full shadow appearance-none border rounded py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
								id="hash"
								type="textarea"
								placeholder="Hashs result "
								rows="4"
								name="hash"
								value={hash}
								onChange={handleChangeInput}
								readOnly
							></textarea>
							
							<input
								className="text-xl mt-2 justify-center block w-1/4 shadow appearance-none border rounded py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
								id="hash"
								type="textarea"
								placeholder="Encrypt time"
								name="hash"
								value={date+ " ms"}
								onChange={handleChangeInput}
								readOnly
							></input>
							
						</div>
					</div>
				</form>
			</div>

			<div className="flex justify-center py-4 px-4 ">
				<ul className="bg-slate-100 sm:w-1/3 w-full rounded-lg border border-gray-200 mx-[-2px] ">
					<li className="font-medium	px-6 py-1 border-b border-gray-200 w-full ">
						Rounds of salting
					</li>
					<li className="px-6 py-1 border-b border-gray-200 w-full">&lt; 8</li>
					<li className="px-6 py-1 border-b border-gray-200 w-full">8 to 10</li>
					<li className="px-6 py-1 border-b border-gray-200 w-full">
						11 to 13
					</li>
					<li className="px-6 py-1 border-b border-gray-200 w-full">
						14 to 15
					</li>
					<li className="px-6 py-1 border-b border-gray-200 w-full">16</li>
					<li className="px-6 py-1 border-b border-gray-200 w-full">17</li>
					<li className="px-6 py-1 border-b border-gray-200 w-full">18</li>
					<li className="px-6 py-1 border-b border-gray-200 w-full">
						25
					</li>
					<li className="px-6 py-1 border-b border-gray-200 w-full">
						31
					</li>
				</ul>
				<ul className="bg-slate-100 sm:w-1/3 w-full rounded-lg border border-gray-200 ">
					<li className="font-medium	px-6 py-1 border-b border-gray-200 w-full">
						Time to process
					</li>
					<li className="px-6 py-1 border-b border-gray-200 w-full">Instant</li>
					<li className="px-6 py-1 border-b border-gray-200 w-full">
						~ 10 hashes / sec
					</li>
					<li className="px-6 py-1 border-b border-gray-200 w-full">
						~ 2 hashes / sec
					</li>
					<li className="px-6 py-1 border-b border-gray-200 w-full">
						~ 1 sec / hash
					</li>{" "}
					<li className="px-6 py-1 border-b border-gray-200 w-full">
						~ 3 sec / hash
					</li>{" "}
					<li className="px-6 py-1 border-b border-gray-200 w-full">
						~ 10 sec / hash
					</li>{" "}
					<li className="px-6 py-1 border-b border-gray-200 w-full">
						~ 30 sec / hash
					</li>{" "}

					<li className="px-6 py-1 border-b border-gray-200 w-full">
						~ 1 hour / hash
					</li>{" "}	<li className="px-6 py-1 border-b border-gray-200 w-full">
						~ 3 days / hash
					</li>{" "}
				</ul>
			</div>
			<p className="text-xl m-5 pt-5 font-normal leading-normal mt-0 mb-2 text-gray-800"><span className="pl-8"></span>Blowfish is a variable-length, symmetric, 64-bit block cipher. Designed by Bruce Schneier in 1993 as a general-purpose algorithm, it was intended to provide a fast, free, drop-in alternative to the aging Data Encryption Standard (DES) and International Data Encryption Algorithm (IDEA) encryption algorithms.</p>
		<p className="text-xl m-5 font-normal leading-normal mt-0 mb-2 text-gray-800"><span className="pl-8"></span>How strong is Blowfish?
Blowfish at 64 bits can be faster than AES (128) particularly when the AES implementation is not maximized to AES-256. However, AES-256 — the strongest encryption standard — is infeasible to brute force with current computing resources.</p>
		
		</div>
	);
}
